#!/usr/bin/env python3

# import of built-in modules
import contextlib
import datetime
import enum
import logging
import os
import stat
import subprocess
import time

# import of third party modules

# import of local modules
import utils.file_utils as file_utils
import utils.ordered_enum as ordered_enum
import utils.os_utils as os_utils
import utils.str_utils as str_utils

# authorship information
__author__ = "Timothy B. Brown"
__copyright__ = "Copyright 2016, The Human Connectome Project"
__maintainer__ = "Timothy B. Brown"

# create a modules logger
logger = logging.getLogger(file_utils.get_logger_name(__file__))


@enum.unique
class PackagingStage(ordered_enum.OrderedEnum):
    PREPARE_SCRIPTS = 0
    GET_DATA = 1
    CREATE_PACKAGE = 2


class OneSubjectPackageJobSubmitter():

    def __init__(self, hcp3t_archive, build_home):
        super().__init__()
        self._archive = hcp3t_archive
        self._build_home = build_home
        self._working_directory_name = None
        self._scripts_start_name = None
        self._xnat_pbs_jobs_home = None

    @property
    def build_home(self):
        return self._build_home

    @property
    def WORK_DESC(self):
        return "bedpostx_package_creation"

    @property
    def project(self):
        return self._project

    @project.setter
    def project(self, value):
        self._project = value
        logger.debug("project set to " + str(value))

    @property
    def subject(self):
        return self._subject

    @subject.setter
    def subject(self, value):
        self._subject = value
        logger.debug("subject set to " + str(value))

    @property
    def session(self):
        return self._session

    @session.setter
    def session(self, value):
        self._session = value
        logger.debug("session set to " + str(value))

    @property
    def server(self):
        return self._server

    @server.setter
    def server(self, value):
        self._server = value
        logger.debug("server set to " + str(value))

    @property
    def working_directory_name(self):
        if not self._working_directory_name:
            current_seconds_since_epoch = int(time.time())
            wdir = self.build_home
            wdir += os.sep + self.project 
            wdir += os.sep + self.WORK_DESC
            wdir += '.' + self.subject
            wdir += '.' + str(current_seconds_since_epoch)
            self._working_directory_name = wdir
            
        return self._working_directory_name

    @property
    def package_output_directory_name(self):
        odir = os.sep + 'HCP' + os.sep + 'hcpdb' + os.sep + 'packages' 
        odir += os.sep + 'prerelease' + os.sep + 'zip' 
        odir += os.sep + self.project 
        odir += os.sep + self.subject
        odir += os.sep + 'bedpostx'

        return odir

    @property
    def scripts_start_name(self):
        if not self._scripts_start_name:
            start_name = self.working_directory_name
            start_name += os.sep + self.subject
            start_name += '.' + self.WORK_DESC
            start_name += '.' + self.project
            start_name += '.' + self.session
            self._scripts_start_name = start_name
            
        return self._scripts_start_name

    @property
    def get_data_script_name(self):
        return self.scripts_start_name + '.GET_DATA.sh'

    @property
    def create_package_script_name(self):
        return self.scripts_start_name + '.CREATE_PACKAGE.sh'

    @property
    def xnat_pbs_jobs_home(self):
        if not self._xnat_pbs_jobs_home:
            self._xnat_pbs_jobs_home = os_utils.getenv_required('XNAT_PBS_JOBS')

        return self._xnat_pbs_jobs_home

    @property
    def continuation(self):
        return ' \\' + os.linesep

    def _write_bash_header(self, script):
        bash_line = "#PBS -S /bin/bash"
        file_utils.wl(script, bash_line)

    def _write_doc_header(self, script):
        file_utils.wl(script, "# Copyright (C) " + str(datetime.datetime.now().year) + " The Human Connectome Project")
        file_utils.wl(script, "#")
        file_utils.wl(script, "# This file was autogenerated to run the " + self.WORK_DESC + " for")
        file_utils.wl(script, "#   subject: " + self.subject)
        file_utils.wl(script, "#   project: " + self.project)
        file_utils.wl(script, "#   session: " + self.session)
        file_utils.wl(script, "")

    def _write_get_data_script(self):
        logger.debug("_write_get_data_script")

        with contextlib.suppress(FileNotFoundError):
            os.remove(self.get_data_script_name)

        script = open(self.get_data_script_name, 'w')

        self._write_bash_header(script)
        
        script.write('#PBS -l nodes=1:ppn=1,walltime=4:00:00,vmem=4gb' + os.linesep)
        script.write('#PBS -q HCPput' + os.linesep)
        script.write('#PBS -o ' + self.working_directory_name + os.linesep)
        script.write('#PBS -e ' + self.working_directory_name + os.linesep)
        script.write(os.linesep)
        script.write(self.xnat_pbs_jobs_home + os.sep + 'bedpostx' + os.sep + 
                     'bedpostx_packaging.XNAT_GET.sh' + self.continuation)
        script.write('  --project=' + self.project + self.continuation)
        script.write('  --subject=' + self.subject + self.continuation)
        script.write('  --working-dir=' + self.working_directory_name + os.linesep)

        script.close()
        os.chmod(self.get_data_script_name, stat.S_IRWXU | stat.S_IRWXG)

    def _write_create_package_script(self):
        logger.debug("_write_create_package_script")

        with contextlib.suppress(FileNotFoundError):
            os.remove(self.create_package_script_name)

        bedpostx_code_dir = self.xnat_pbs_jobs_home + os.sep + 'bedpostx'
        bedpostx_create_script_path = bedpostx_code_dir + os.sep + \
            'bedpostx_packaging.CREATE.sh'
        release_notes_template_path = bedpostx_code_dir + os.sep + \
            'ReleaseNotesTemplate.txt'

        script = open(self.create_package_script_name, 'w')

        self._write_bash_header(script)

        script.write('#PBS -l nodes=1:ppn=1,walltime=4:00:00,vmem=4gb' + os.linesep)
        script.write('#PBS -q HCPput' + os.linesep)
        script.write('#PBS -o ' + self.working_directory_name + os.linesep)
        script.write('#PBS -e ' + self.working_directory_name + os.linesep)
        script.write(os.linesep)
        self._write_doc_header(script)
        script.write(os.linesep)
        script.write(bedpostx_create_script_path + self.continuation)
        script.write('  --project=' + self.project + self.continuation)
        script.write('  --subject=' + self.subject + self.continuation)
        script.write('  --working-dir=' + self.working_directory_name + self.continuation)
        script.write('  --release-notes-template=' + release_notes_template_path + self.continuation)
        script.write('  --create-checksum' + self.continuation)
        script.write('  --output-dir=' + self.package_output_directory_name + os.linesep)

        script.close()
        os.chmod(self.create_package_script_name, stat.S_IRWXU | stat.S_IRWXG)

    def submit_jobs(self, packaging_stage=PackagingStage.CREATE_PACKAGE):
        logger.debug("submit_jobs: packaging_stage: " + str(packaging_stage))
        
        logger.info("----------")
        logger.info("Submitting " + self.WORK_DESC + " jobs for")
        logger.info(" Project: " + self.project)
        logger.info(" Subject: " + self.subject)
        logger.info(" Session: " + self.session)
        logger.info("   Stage: " + str(packaging_stage))
        logger.info("----------")

        # make sure working directories do not have the same name based on 
        # the same starting time by sleeping a few seconds
        time.sleep(5)

        # build the working directory
        logger.info("Making working directory: " + self.working_directory_name)
        os.makedirs(name=self.working_directory_name)
        
        if packaging_stage >= PackagingStage.PREPARE_SCRIPTS:
            self._write_get_data_script()
            self._write_create_package_script()
            
        # submit the script to get the data
        if packaging_stage >= PackagingStage.GET_DATA:
                
            get_data_submit_cmd = 'qsub ' + self.get_data_script_name
            logger.info("get_data_submit_cmd: " + get_data_submit_cmd)
            
            completed_process = subprocess.run(get_data_submit_cmd, shell=True, check=True, 
                                               stdout=subprocess.PIPE, universal_newlines=True)
            get_data_job_no = str_utils.remove_ending_new_lines(completed_process.stdout)
            logger.info("get_data_job_no: " + get_data_job_no)

        else:
            logger.info("Get data job not submitted")

        # submit the script to create the package
        if packaging_stage >= PackagingStage.CREATE_PACKAGE:
            
            create_package_submit_cmd = 'qsub -W depend=afterok:' + get_data_job_no + ' '
            create_package_submit_cmd += self.create_package_script_name
            logger.info("create_package_submit_cmd: " + create_package_submit_cmd)

            completed_process = subprocess.run(create_package_submit_cmd, shell=True, check=True,
                                               stdout=subprocess.PIPE, universal_newlines=True)
            create_package_job_no = str_utils.remove_ending_new_lines(completed_process.stdout)
            logger.info("create_package_job_no: " + create_package_job_no)

        else:
            logger.info("Create package job not submitted")
